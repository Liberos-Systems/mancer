#!/usr/bin/env python3
"""
Test Strategii Prototyp√≥w - weryfikuje dzia≈Çanie ca≈Çego systemu prototyp√≥w

Ten skrypt testuje:
1. Dzia≈Çanie mened≈ºera prototyp√≥w
2. Tworzenie nowego prototypu
3. Uruchamianie prototypu
4. Generowanie raport√≥w
"""

import shutil
import subprocess
import sys
from pathlib import Path


def run_command(cmd, cwd=None, capture_output=True):
    """Uruchamia komendƒô i zwraca wynik."""
    try:
        result = subprocess.run(cmd, cwd=cwd, capture_output=capture_output, text=True, shell=True)
        return result
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd uruchamiania komendy '{cmd}': {e}")
        return None


def test_prototype_manager():
    """Testuje mened≈ºer prototyp√≥w."""
    print("üß™ Testowanie mened≈ºera prototyp√≥w...")

    # Test listy prototyp√≥w
    result = run_command("python tools/prototype_manager.py list")
    if result and result.returncode == 0:
        print("‚úÖ Lista prototyp√≥w dzia≈Ça")
    else:
        print("‚ùå Lista prototyp√≥w nie dzia≈Ça")
        return False

    # Test raportu
    result = run_command("python tools/prototype_manager.py report")
    if result and result.returncode == 0:
        print("‚úÖ Generowanie raport√≥w dzia≈Ça")
    else:
        print("‚ùå Generowanie raport√≥w nie dzia≈Ça")
        return False

    return True


def test_prototype_creation():
    """Testuje tworzenie nowego prototypu."""
    print("\nüß™ Testowanie tworzenia prototypu...")

    test_name = "test-prototype"
    test_description = "Prototyp testowy do weryfikacji strategii"

    # Usu≈Ñ istniejƒÖcy prototyp testowy je≈õli istnieje
    test_path = Path("prototypes") / test_name
    if test_path.exists():
        shutil.rmtree(test_path)

    # Utw√≥rz nowy prototyp
    cmd = f'python tools/prototype_manager.py create --name "{test_name}" ' f'--description "{test_description}"'
    result = run_command(cmd)

    if result and result.returncode == 0:
        print("‚úÖ Tworzenie prototypu dzia≈Ça")

        # Sprawd≈∫ czy pliki zosta≈Çy utworzone
        if test_path.exists():
            required_files = [
                "README.md",
                "main.py",
                "requirements.txt",
                "pyproject.toml",
            ]
            missing_files = [f for f in required_files if not (test_path / f).exists()]

            if not missing_files:
                print("‚úÖ Wszystkie wymagane pliki zosta≈Çy utworzone")
                return test_name
            else:
                print(f"‚ùå BrakujƒÖce pliki: {missing_files}")
                return None
        else:
            print("‚ùå Katalog prototypu nie zosta≈Ç utworzony")
            return None
    else:
        print("‚ùå Tworzenie prototypu nie dzia≈Ça")
        return None


def test_prototype_execution(prototype_name):
    """Testuje uruchamianie prototypu."""
    print(f"\nüß™ Testowanie uruchamiania prototypu '{prototype_name}'...")

    # Sprawd≈∫ czy prototyp istnieje
    prototype_path = Path("prototypes") / prototype_name
    if not prototype_path.exists():
        print(f"‚ùå Prototyp {prototype_name} nie istnieje")
        return False

    # Uruchom prototyp
    cmd = f'python tools/prototype_manager.py run --name "{prototype_name}"'
    result = run_command(cmd)

    if result and result.returncode == 0:
        print("‚úÖ Uruchamianie prototypu dzia≈Ça")
        return True
    else:
        print("‚ùå Uruchamianie prototypu nie dzia≈Ça")
        if result and result.stderr:
            print(f"B≈ÇƒÖd: {result.stderr}")
        return False


def test_framework_integration(prototype_name):
    """Testuje integracjƒô prototypu z frameworkiem."""
    print("\nüß™ Testowanie integracji z frameworkiem...")

    prototype_path = Path("prototypes") / prototype_name
    main_py = prototype_path / "main.py"

    if not main_py.exists():
        print("‚ùå Brak pliku main.py")
        return False

    try:
        # Sprawd≈∫ czy kod importuje framework
        content = main_py.read_text()

        if "from mancer" in content or "import mancer" in content:
            print("‚úÖ Prototyp importuje framework")
        else:
            print("‚ùå Prototyp nie importuje frameworka")
            return False

        if "sys.path.insert" in content:
            print("‚úÖ Prototyp ma poprawnƒÖ konfiguracjƒô ≈õcie≈ºek")
        else:
            print("‚ùå Prototyp nie ma konfiguracji ≈õcie≈ºek")
            return False

        return True

    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd analizy kodu: {e}")
        return False


def cleanup_test_prototype(prototype_name):
    """Usuwa testowy prototyp."""
    print(f"\nüßπ Czyszczenie testowego prototypu '{prototype_name}'...")

    test_path = Path("prototypes") / prototype_name
    if test_path.exists():
        shutil.rmtree(test_path)
        print("‚úÖ Testowy prototyp zosta≈Ç usuniƒôty")
    else:
        print("‚ö†Ô∏è  Testowy prototyp ju≈º nie istnieje")


def run_integration_tests():
    """Uruchamia testy integracyjne."""
    print("\nüß™ Testy integracyjne...")

    # Sprawd≈∫ czy framework jest dostƒôpny
    framework_path = Path("src/mancer")
    if not framework_path.exists():
        print("‚ùå Katalog frameworka nie istnieje")
        return False

    # Sprawd≈∫ czy szablon prototypu istnieje
    template_path = Path("prototypes/template")
    if not template_path.exists():
        print("‚ùå Szablon prototypu nie istnieje")
        return False

    print("‚úÖ Podstawowa struktura jest poprawna")
    return True


def main():
    """G≈Ç√≥wna funkcja test√≥w."""
    print("üöÄ TEST STRATEGII PROTOTYP√ìW FRAMEWORKA MANCER")
    print("=" * 60)

    # Sprawd≈∫ czy jeste≈õmy w odpowiednim katalogu
    if not Path("src/mancer").exists():
        print("‚ùå Uruchom skrypt z g≈Ç√≥wnego katalogu projektu")
        sys.exit(1)

    # Testy integracyjne
    if not run_integration_tests():
        sys.exit(1)

    # Test mened≈ºera prototyp√≥w
    if not test_prototype_manager():
        print("\n‚ùå Testy mened≈ºera prototyp√≥w nie przesz≈Çy")
        sys.exit(1)

    # Test tworzenia prototypu
    prototype_name = test_prototype_creation()
    if not prototype_name:
        print("\n‚ùå Test tworzenia prototypu nie przeszed≈Ç")
        sys.exit(1)

    # Test integracji z frameworkiem
    if not test_framework_integration(prototype_name):
        print("\n‚ùå Test integracji z frameworkiem nie przeszed≈Ç")
        cleanup_test_prototype(prototype_name)
        sys.exit(1)

    # Test uruchamiania prototypu
    if not test_prototype_execution(prototype_name):
        print("\n‚ùå Test uruchamiania prototypu nie przeszed≈Ç")
        cleanup_test_prototype(prototype_name)
        sys.exit(1)

    # Czyszczenie
    cleanup_test_prototype(prototype_name)

    print("\nüéâ WSZYSTKIE TESTY PRZESZ≈ÅY POMY≈öLNIE!")
    print("‚úÖ Strategia prototyp√≥w dzia≈Ça poprawnie")
    print("‚úÖ Framework jest gotowy do u≈ºycia w prototypach")
    print("‚úÖ Mened≈ºer prototyp√≥w funkcjonuje")

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
